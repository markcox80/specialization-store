{in-package "SPECIALIZATION-STORE"}

This document defines a new type of function, called a store function,
whose behaviour is conditioned on the types of objects given as
arguments to the function.

The behaviour for a specific set of object types is referred to as a
specialization of the store function.

The key differences between the common lisp object system's generic
function and a store function are:
{begin-list}
{item}
Optional, rest and/or keyword arguments are considered when selecting
the most applicable specialization.
{item}
Improved support for compile time optimizations.
{end-list}

The design of the store function specification consists of the
following layers:
{begin-list}
{item/label-ref :section section/object-layer}
{item/label-ref :section section/syntax-layer}
{item/label-ref :section section/glue-layer}
{item/label-ref :section section/lambda-lists}
{item/label-ref :section section/standard-classes}
{end-list}

The {ref :section section/object-layer :text "object layer"}
encapsulates the objects and operators used by a store function.

The {ref :section section/syntax-layer :text "syntax layer"} provides
a convenient syntax for defining new store functions and
specializations in the global environment.

The {ref :section section/glue-layer :text "glue layer"} connects the
syntax and object layers and is responsible for modifying the global
environment.

The {ref :section section/lambda-lists :text "lambda lists"} section
outlines how arguments are specified to store functions and what types
of arguments are required for a specific specialization.

The default store function is described in the {ref :section
section/standard-classes} section.

Lastly, all of the symbols specified in this document have uppercase
symbol names and exported from a single package. The name of this
package is implementation specific.

{section section/object-layer "Object Layer"}
The object layer encapsulates the objects and operators used to
model store functions.

The object layer contains the following sublayers:
{begin-list}
{item/label-ref :section section/object-layer/store}
{item/label-ref :section section/object-layer/specialization}
{end-list}

All of the definitions associated with the object layer can be found
in the {ref :section section/object-layer/dictionary :text "object
layer dictionary"}.


{subsection section/object-layer/store "Store Object"}
A store function is represented by a {ref :glossary store-object}
which encapsulates all of the data needed by a store function.

All operations performed by the store function are defined by
operators that are applied to the store object.

A store object must be an instance of {dictionary :mop :type
funcallable-standard-object}.

A store object manages a set of specialization objects. Each {ref
:section section/object-layer/specialization :text "specialization
object"}, or specialization, encapsulates behaviour which a store
function may invoke during an invocation.

The arguments accepted by a store function are represented using a
{ref :glossary store-lambda-list}. The store lambda list specifies the
required, optional, rest and keyword arguments that are used to
determine the behaviour for a given set of arguments.

The set of specializations managed by a store object must be {ref
:section section/lambda-lists/congruence :text "congruent"} with the
store lambda list.

Invocations of a store function are represented by the following
operators on {ref :glossary store-object :text "store objects"}:
{begin-list}
{item}{dictionary :ss :function funcall-store}
{item}{dictionary :ss :function apply-store}
{item}{dictionary :ss :function expand-store}
{end-list}

The functions {dictionary :ss :function funcall-store} and {dictionary
:ss :function apply-store} model run-time applications of a store
function.

The function {dictionary :ss :function expand-store} provides
opportunities for users to perform any compile time optimizations.

Which specialization (or specializations) the above functions select
during an invocation is defined by the implementation of the store
object.

Adding specializations to a store object is performed using the
function {dictionary :ss :function add-specialization}.

Removing specializations from the store object is performed using the
function {dictionary :ss :function remove-specialization}.

The sequence of specialization objects managed by a store object can
be obtained using the function {dictionary :ss :function
store-specializations}.

{subsection section/object-layer/specialization "Specialization Object"}
The specialization object, or specialization, encapsulates the
behaviour of a store function for arguments satisfying particular
types.

The types of input arguments for which the specialization is valid is
specified using a {ref :section
section/lambda-lists/specialized-lambda-list :text "specialized lambda
list"}. This lambda list can be retrieved from a specialization using
the function {dictionary :ss :function specialization-lambda-list}.

The type specifier denoting the type of values returned by the
specialization can be retrieved using the function {dictionary :ss
:function specialization-value-type}.

The run-time behaviour of the specialization is captured by the
function returned by {dictionary :ss :function
specialization-function}.

Any compile time optimizations available for a specialization are
performed using the function returned by {dictionary :ss :function
specialization-expand-function}.

{subsection section/object-layer/dictionary "Object Layer Dictionary"}
{heading "Conditions"}
{dictionary-section :type store-error}
{dictionary-section :function store-error-store}
{dictionary-section :type simple-store-error}
{dictionary-section :function simple-store-error-message}
{dictionary-section :type invalid-store-name-error}
{dictionary-section :function invalid-store-name}

{heading "Store Objects"}
{dictionary-section :function funcall-store}
{dictionary-section :function apply-store}
{dictionary-section :function expand-store}


{dictionary-section :function add-specialization}
{dictionary-section :function remove-specialization}
{dictionary-section :function specialization-equal}
{dictionary-section :function store-specializations}
{dictionary-section :function (setf store-specializations)}
{dictionary-section :type duplicate-specialization-error}

{dictionary-section :function store-lambda-list}
{dictionary-section :function store-value-type}


{dictionary-section :function store-documentation}
{dictionary-section :function (setf store-documentation)}


{dictionary-section :type inapplicable-arguments-error}
{dictionary-section :function inapplicable-arguments}
{dictionary-section :type incongruent-specialization-error}

{heading "Specializations"}
{dictionary-section :function specialization-function}
{dictionary-section :function specialization-expand-function}


{dictionary-section :function specialization-lambda-list}
{dictionary-section :function specialization-value-type}


{dictionary-section :function specialization-documentation}
{dictionary-section :function (setf specialization-documentation)}

{section section/syntax-layer "Syntax Layer"}
In this section we outline a convenient syntax for creating store
functions and adding specializations to them.


{subsection section/syntax-layer/dictionary "Dictionary"}
{dictionary-section :function defstore}
{dictionary-section :function defspecialization}
{dictionary-section :function define-specialization}

{section section/glue-layer "Glue Layer"}
{subsection section/glue-layer/dictionary "Dictionary"}
{dictionary-section :function store-name}
{dictionary-section :function specialization-name}
{dictionary-section :function find-store}
{dictionary-section :function (setf find-store)}
{dictionary-section :function ensure-store-using-class}
{dictionary-section :function ensure-store}
{dictionary-section :function make-store-unbound}
{dictionary-section :function ensure-specialization-using-class}
{dictionary-section :function ensure-specialization}
{dictionary-section :function store-specialization-class}

{section section/lambda-lists "Lambda Lists"}

{subsection section/lambda-lists/store-lambda-list "Store Lambda List"}

{subsection section/lambda-lists/specialized-lambda-list "Specialized Lambda List"}

{subsection section/lambda-lists/congruence "Congruence"}

{section section/standard-classes "Standard Classes"}

A specialization should be regarded as an efficient implementation of
behaviour for the specified argument types. In other words, if two or
more specializations belonging to a store function are applicable,
then these specializations should perform the same operation.

{section section/communicating-types "Communicating Type Information"}

{glossary-term store-function "store function"}
A function whose behaviour is determined by a {ref :glossary store-object}.

{glossary-term store-object "store object"}
Blah blah.

{glossary-term specialization-object "specialization object"}
Blah.

{glossary-term store-lambda-list "store lambda list"}
Blah.

{define-citation amop :book
  :authors ("Gregor Kiczales" "Jim Des Rivieres")
  :title "The Art of the Metaobject Protocol"
  :year 1991
  :isbn "0262111586"
  :publisher "MIT Press"
  :address "Cambridge, MA, USA"}

||| Local Variables:
||| mode: flyspell
||| End: