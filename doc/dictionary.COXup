{in-package "SPECIALIZATION-STORE"}

{condition-type store-error :parent-classes (error)}
{description}
All errors signalled by functions in the specialization store system
are subtypes of the condition type {ref :type store-error}.

The function {ref :function store-error-store} can be used to obtain
the store object involved in the error.


{function store-error-store :arguments (store-error) :values store}
{definition store-error}
The store error.

{definition store}
The store object which is an error.

{description}
Obtain the store object which signalled an error of type {ref :type
store-error}.

{condition-type simple-store-error :parent-classes (store-error)}
{description}
The simple store error condition type is used in scenarios where the
error is too generic to require its own condition type.

Simple store error conditions contain an error message which can be
retrieved using the function {ref :function
simple-store-error-message}.


{function simple-store-error-message :arguments (store-error) :values string}
{definition store-error}
A condition of type {ref :type simple-store-error}.

{definition string}
The message passed to the simple store error.

{description}
Obtain the string used to initialize the simple-store-error condition
object.

{condition-type invalid-store-name-error :parent-classes (store-error)}
{description}
A condition of type ~invalid-store-name-error~ is signalled by the
function {ref :function find-store} in cases where no store object is
associated with the given symbol.

The function {ref :function invalid-store-name} can be used to obtain
the invalid name.


{function invalid-store-name :arguments (invalid-store-name-error) :values name}
{description}

{condition-type inapplicable-arguments-error :parent-classes (store-error)}
{description}
A condition of type ~inapplicable-arguments-error~ is signalled when
{ref :function funcall-store} or {ref :function apply-store} is unable
to find a specialization which is applicable to the given arguments.

The function {ref :function store-error-store}
can be used to retrieve the store object which has no applicable
specialization.

The function {ref :function
inapplicable-arguments} to retrieve the
arguments for which there is no applicable specialization for.

{condition-type incongruent-specialization-error :parent-classes (store-error)}
{description}

{function inapplicable-arguments}
{description}
Return the arguments used to initialize an instance of the condition
type {ref :type inapplicable-arguments-error}.


{condition-type duplicate-specialization-error :parent-classes (store-error)}
{description}

{generic-function funcall-store
                  :arguments (store &rest arguments)
                  :values (&rest results)}
{definition store}
The store object in which to select specializations from.

{definition arguments}
The objects used to select the most applicable specialization.

{definition results}
Values computed by the function associated with the most applicable specialization.

{description}
Invoke the function associated with the most applicable specialization
to the object types given in ~arguments~.

{exceptional-situations}
A condition of type {ref :type error} is signalled if the
number of arguments given is not congruent with the store lambda list
defined for ~store~.

A condition of type {ref :type inapplicable-arguments-error}
is signalled if no specialization is applicable to ~arguments~.

{generic-function apply-store
                  :arguments (store &rest args)
                  :values (&rest results)}
{definition store}
The store object used to select specializations from.

{definition args}
The arguments to invoke the store function with.

{definition results}
Values computed by the function associated with the most applicable
specialization.

{description}
The function {ref :function apply-store} is to {ref :function
funcall-store} as {ref :function apply} is to {ref :function funcall}.

{exceptional-situations}
A condition of type {ref :type error} is signalled if the
last argument given is not of type list.

The list of exceptional situations for the function ~apply-store~ are
identical to the exceptional situations defined for {ref :function funcall-store}.

{generic-function expand-store
                  :arguments (store form &optional environment)
                  :values expansion}
{definition store}
The store object used to select specializations from.

{definition form}
The form that is to be optimized.

{definition environment}
An environment object. The default value is {ref :variable nil}.

{definition expansion}
A new form which when evaluated performs the same task as ~form~ or ~form~.

{description}
The function ~expand-store~ tries to find the most applicable
specialization for the form ~form~ and invoke its expander
function. If no specialization can be found, then ~form~ is returned.


{generic-function add-specialization
                  :arguments (store specialization)
                  :values result}
{definition store}
A store object.

{definition specialization}
A specialization object.

{definition result}
The value of ~store~.

{description}
The function ~add-specialization~ is used to add specialization
objects to store objects.

An existing specialization managed by ~store~ that is equivalent to
~specialization~ is replaced with ~specialization~. Equivalence is
determined by the function {ref :function specialization-equal}.

{exceptional-situations}
An error of type {ref :type
incongruent-specialization-error} is signalled if the specialized
lambda list for ~specialization~ is not congruent with the store
lambda list for ~store~.


{generic-function remove-specialization
                  :arguments (store specialization)
                  :values result}
{definition store}
The store object to remove the specialization from.

{definition specialization}
The specialization to remove.

{definition result}
The value of ~store~.

{description}
Remove the specialization object ~specialization~ from the set of
specializations associated with ~store~.


{generic-function specialization-equal
                  :arguments (store specialization-a specialization-b)
                  :values result}
{definition store}
A store object.

{definition specialization-a}
A specialization object.

{definition specialization-b}
A specialization object.

{definition result}
A generalized boolean.

{description}
This function returns non ~nil~ if ~specialization-a~ is equivalent to
~specialization-b~. Otherwise ~nil~.

{exceptional-situations}
An error of type {ref :type incongruent-specialization-error} is
signalled if the specialized lambda list for ~specialization-a~ or
~specialization-b~ is not congruent with the store lambda list for
~store~.

{generic-function store-specializations
                  :arguments (store)
                  :values specializations}
{definition store}
A store object.

{definition specializations}
A list of specialization objects.

{description}
Return a list specialization objects that are associated with the
store object ~store~.


{generic-function (setf store-specializations)
                  :arguments (specializations store)
                  :values specializations}
{definition specializations}
A list of specialization objects.

{definition store}
A store object.

{description}
Change the set of specialization objects associated with the store object ~store~.

{exceptional-situations}
An error of type {ref :type incongruent-specialization-error} is
signalled if one of the specializations in ~specializations~ is not
congruent with the store object ~store~.

An error of type {ref :type duplicate-specialization-error}
is signalled if there exists two or more specializations that are
equal according to {ref :function specialization-equal}.


{generic-function store-name :arguments (store) :values symbol}
{definition store}
A store object.

{definition symbol}
A symbol.

{description}
Return the name associated with the store object.

The glue layer uses this function to obtain the function name for a
{ref :glossary store-function} which uses the store object ~store~.

{generic-function store-lambda-list :arguments (store) :values store-lambda-list}
{definition store}
A store object.

{definition store-lambda-list}
A list representing a {ref :glossary store-lambda-list}.

{description}
Return the store lambda list defining the signature of the store object ~store~ accepts.


{generic-function store-value-type :arguments (store) :values store-value-type}
{definition store}
A store object.

{definition store-value-type}
A type representing the values returned by the store function.

{description}
Return the type representing the set of objects which the store
function represented by the ~store~ returns.

{generic-function store-documentation :arguments (store) :values string}
{definition store}
A store object.

{definition string}
A string.

{description}
Return a string which documents the store object.


{generic-function (setf store-documentation) :arguments (value store) :values string}
{definition value}
The new documentation.

{definition store}
A store object.

{definition string}
A string.

{description}
Change the documentation for the store object.

{generic-function specialization-name :arguments (specialization) :values symbol}
{definition specialization}
A specialization object.

{definition symbol}
A symbol.

{description}
Return the name associated with the specialization object.


{generic-function specialization-function :arguments (specialization) :values function}
{definition specialization}
A specialization object.

{definition function}
A function object.

{description}


{generic-function specialization-expand-function :arguments (specialization) :values function}
{definition specialization}
A specialization object.

{definition function}
A function object.

{description}
Return a function which performs compile time optimization of the form.

The function must accept two arguments. The first is the form to
optimize and the second is the current environment.


{generic-function specialization-lambda-list :arguments (specialization) :values lambda-list}
{definition specialization}
A specialization object.

{definition lambda-list}
A specialization lambda list.

{description}
Return the specialized lambda list associated with the specialization.


{generic-function specialization-value-type :arguments (specialization) :values type-specifier}
{definition specialization}
A specialization object.

{definition type-specifier}
A type specifier.

{description}
Return the type specifier denoting the type of values returned by the
specialization.

{generic-function specialization-documentation :arguments (specialization) :values string}
{definition specialization}
A specialization object.

{definition string}
A string.

{description}
Return the documentation for the specialization.


{generic-function (setf specialization-documentation)
                  :arguments (value specialization)
                  :values string}
{definition value}
A string.

{definition specialization}
A specialization object.

{definition string}
A string.

{description}
Change the documentation for the specialization object.


{function find-store :arguments (name) :values store}
{definition name}
A symbol.

{definition store}
A store object.

{description}
Return the store object associated with the symbol ~name~ in the
global environment.

{exceptional-situations}
This function signals and error of type {ref :type
invalid-store-name-error} if no store object is associated with the
given name.

{function (setf find-store) :arguments (value name) :values store}
{definition value}
A store object.

{definition name}
A symbol.

{definition store}
A store object.

{description}
Replace the store object associated with the symbol ~name~ in the
global environment.

This function returns ~value~.

If ~value~ is ~nil~ then {ref :function make-store-unbound}
is called on the bound store object.

{generic-function ensure-store-using-class
                  :arguments (class store-name lambda-list
                              completion-function form-type-completion-function
                              &key
                                store-class specialization-class documentation
                              &allow-other-keys)
                  :values store}
{definition class}
{definition store-name}
{definition lambda-list}
{definition completion-function}
{definition form-type-completion-function}
{definition store-class}
{definition specialization-class}
{definition documentation}
A string.

{definition store}
A store object.

{description}


{function ensure-store
          :arguments (name store-lambda-list
                      completion-function form-type-completion-function
                      &key
                        store-class specialization-class documentation
                      &allow-other-keys)
          :values store}
{definition name}
{definition store-lambda-list}
{definition completion-function}
{definition form-type-completion-function}
{definition store-class}
{definition specializaiton-class}

{definition documentation}
A string.

{definition store}
A store object.

{description}

{generic-function make-store-unbound :arguments (name) :values ()}
{definition name}
A symbol.

{description}
Remove the association between a store object and a name from the
global environment.

This function is responsible for removing all modifications to the
global environment.

{generic-function ensure-specialization-using-class
                  :arguments (store-class specialized-lambda-list value-type function
                              &key
                                expand-function name documentation
                              &allow-other-keys)
                  :values specialization}
{definition store-class}
{definition specialized-lambda-list}
{definition value-type}
{definition function}
{definition expand-function}
{definition name}
{definition documentation}
{definition specialization}
{description}


{function ensure-specialization
          :arguments (store-name specialized-lambda-list value-type function
                      &key
                        expand-function documentation name
                      &allow-other-keys)
          :values specialization}
{definition store-name}
{definition specialized-lamda-list}
{definition value-type}
{definition function}
{definition expand-function}
{definition documentation}
{definition name}
{definition specialization}
{description}

{generic-function store-specialization-class
                  :arguments (store)
                  :values class}
{definition store}
{definition class}
{description}


{macro defstore :arguments (store-name store-lambda-list &body body)
                :values new-store}
{definition store-name}
{definition store-lambda-list}
{definition body}
{definition new-store}
{description}

{macro defspecialization :arguments (store-name specialized-lambda-list value-type &body body)
                         :values new-specialization}
{definition store-name}
{definition specialized-lambda-list}
{definition value-type}
{definition body}
{definition new-specialization}
{description}

{macro define-specialization :arguments (store-name specialized-lambda-list value-type &body body)
                             :values new-specialization}
{definition store-name}
{definition specialized-lambda-list}
{definition value-type}
{definition body}
{definition new-specialization}
{description}

||| Local Variables:
||| mode: flyspell
||| End: