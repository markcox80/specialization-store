{in-package "SPECIALIZATION-STORE"}

{condition-type store-error :parent-classes (error)}
{description}
All errors signalled by operators in the specialization store
specification are subtypes of the condition type {ref :type
store-error}.

The function {ref :function store-error-store} can be used to obtain
the store object involved in the error.

{function store-error-store :arguments (store-error) :values store}
{definition store-error}
A {ref :type store-error} instance.

{definition store}
A store object.

{description}
Obtain the store object which the condition type {ref :type
store-error} was initialized with.

{condition-type simple-store-error :parent-classes (store-error)}
{description}
The simple store error condition type is provided for cases where the
error does not require its own condition type.

Simple store error conditions contain an error message which can be
retrieved using the function {ref :function
simple-store-error-message}.

{function simple-store-error-message :arguments (store-error) :values string}
{definition store-error}
A condition of type {ref :type simple-store-error}.

{definition string}
A string.

{description}
Obtain the error message used to initialize the simple-store-error
condition object.

{condition-type invalid-store-name-error :parent-classes (store-error)}
{description}
A condition of type ~invalid-store-name-error~ is signalled by the
function {ref :function find-store} in cases where no store object is
associated with the given symbol.

The function {ref :function invalid-store-name} can be used to obtain
the invalid name.

{function invalid-store-name :arguments (invalid-store-name-error) :values name}
{definition invalid-store-name-error}
A condition of type {ref :type invalid-store-name-error}.

{definition name}
A store object name.

{description}
This function returns the name argument given to the function {ref
:function find-store} for which no store object has been associated
with.

{condition-type inapplicable-arguments-error :parent-classes (store-error)}
{description}
A condition of type ~inapplicable-arguments-error~ is signalled when
{ref :function funcall-store} or {ref :function apply-store} is unable
to find a specialization which is applicable to the given arguments.

The function {ref :function store-error-store}
can be used to retrieve the store object which has no applicable
specialization.

The function {ref :function
inapplicable-arguments} to retrieve the
arguments for which there is no applicable specialization for.

{condition-type incongruent-specialization-error :parent-classes (store-error)}
{description}

{function inapplicable-arguments}
{description}
Return the arguments used to initialize an instance of the condition
type {ref :type inapplicable-arguments-error}.


{condition-type duplicate-specialization-error :parent-classes (store-error)}
{description}

{condition-type ensure-store-error :parent-classes (error)}
{description}
Errors of this type are signalled inside methods of {ref :function
ensure-store-using-object}.

The object argument given to the function can be retrieved from the
condition object using the function {ref :function
ensure-store-error-object}.

{function ensure-store-error-object :arguments (condition) :values object}
{definition condition}
A condition.

{definition object}
An object.

{description}
Return the object used as the argument to {ref :function
ensure-store-using-object}.

{condition-type invalid-store-lambda-list-error :parent-classes (ensure-store-error)}
{description}
This condition is signalled inside methods of {ref :function
ensure-store-using-object} when the method is unable to
proceed due to the given store lambda list.

{function invalid-store-lambda-list :arguments (condition) :values store-lambda-list}
{definition condition}
A condition.

{definition store-lambda-list}
A store lambda list.

{description}
Return the store lambda list which a method of {ref :function
ensure-store-using-object} was unable to process.

{condition-type invalid-specialization-class-error :parent-classes (ensure-store-error)}
{description}

This condition is signalled inside methods of {ref :function
ensure-store-using-object} when the method is unable to
proceed due to the given specialization class.

The function {ref :function invalid-specialization-class} can be used
to retrieve the invalid specialization class.


{function invalid-specialization-class :arguments (condition) :values class}
{definition condition}
A condition.
{definition class}
A class object.
{description}
Return the specialization class which a method of {ref :function
ensure-store-using-object} was unable to process.

{condition-type invalid-store-class-error :parent-classes (ensure-store-error)}
{description}
This condition is signalled inside methods of {ref :function
ensure-store-using-object} when the method is unable to
proceed due to the given store class argument.

The function {ref :function invalid-store-class} can be used to
retrieve the invalid store class.

{function invalid-store-class :arguments (condition) :values object}
{definition condition}
A condition.
{definition object}
A store class.
{description}
Return the store class which a method of {ref :function
ensure-store-using-object} was unable to process.

{generic-function funcall-store
                  :arguments (store &rest arguments)
                  :values (&rest values)}
{definition store}
A store object.

{definition arguments}
Arguments to the store object function.

{definition values}
Values computed by the store object function.

{description}
Invoke the {ref :glossary store-object-function} associated with the
store object ~store~.

{exceptional-situations}
A condition of type {ref :type store-error} is signalled if the
arguments given are not congruent with the {ref :function
store-lambda-list :text "store lambda list"} defined for ~store~.

A condition of type {ref :type inapplicable-arguments-error}
is signalled if no specialization is applicable to ~arguments~.

{generic-function apply-store
                  :arguments (store &rest args)
                  :values (&rest results)}
{definition store}
The store object used to select specializations from.

{definition args}
The arguments to invoke the store function with.

{definition results}
Values computed by the function associated with the most applicable
specialization.

{description}
The function {ref :function apply-store} is to {ref :function
funcall-store} as {ref :function apply} is to {ref :function funcall}.

{exceptional-situations}
A condition of type {ref :type error} is signalled if the
last argument given is not of type list.

The list of exceptional situations for the function ~apply-store~ are
identical to the exceptional situations defined for {ref :function funcall-store}.

{generic-function expand-store
                  :arguments (store form &optional environment)
                  :values expansion}
{definition store}
The store object used to select specializations from.

{definition form}
The form that is to be optimized.

{definition environment}
An environment object. The default value is {ref :variable nil}.

{definition expansion}
A new form which when evaluated performs the same task as ~form~ or ~form~.

{description}
The function ~expand-store~ tries to find the most applicable
specialization for the form ~form~ and invoke its expander
function. If no specialization can be found, then ~form~ is returned.


{generic-function add-specialization
                  :arguments (store specialization)
                  :values result}
{definition store}
A store object.

{definition specialization}
A specialization object.

{definition result}
The value of ~store~.

{description}
The function ~add-specialization~ is used to add specialization
objects to store objects.

An existing specialization managed by ~store~ that is equivalent to
~specialization~ is replaced with ~specialization~. Equivalence is
determined by the function {ref :function specialization-equal}.

{exceptional-situations}
An error of type {ref :type
incongruent-specialization-error} is signalled if the specialized
lambda list for ~specialization~ is not congruent with the store
lambda list for ~store~.


{generic-function remove-specialization
                  :arguments (store specialization)
                  :values result}
{definition store}
The store object to remove the specialization from.

{definition specialization}
The specialization to remove.

{definition result}
The value of ~store~.

{description}
Remove the specialization object ~specialization~ from the set of
specializations associated with ~store~.


{generic-function specialization-equal
                  :arguments (store specialization-a specialization-b)
                  :values result}
{definition store}
A store object.

{definition specialization-a}
A specialization object.

{definition specialization-b}
A specialization object.

{definition result}
A generalized boolean.

{description}
This function returns non ~nil~ if ~specialization-a~ is equivalent to
~specialization-b~. Otherwise ~nil~.

{exceptional-situations}
An error of type {ref :type incongruent-specialization-error} is
signalled if the specialized lambda list for ~specialization-a~ or
~specialization-b~ is not congruent with the store lambda list for
~store~.

{generic-function store-specializations
                  :arguments (store)
                  :values specializations}
{definition store}
A store object.

{definition specializations}
A list of specialization objects.

{description}
Return a list specialization objects that are associated with the
store object ~store~.


{generic-function (setf store-specializations)
                  :arguments (specializations store)
                  :values specializations}
{definition specializations}
A list of specialization objects.

{definition store}
A store object.

{description}
Change the set of specialization objects associated with the store object ~store~.

{exceptional-situations}
An error of type {ref :type incongruent-specialization-error} is
signalled if one of the specializations in ~specializations~ is not
congruent with the store object ~store~.

An error of type {ref :type duplicate-specialization-error}
is signalled if there exists two or more specializations that are
equal according to {ref :function specialization-equal}.


{generic-function store-name :arguments (store) :values symbol}
{definition store}
A store object.

{definition symbol}
A symbol.

{description}
Return the name associated with the store object.

The glue layer uses this function to obtain the function name for a
{ref :glossary store-function} which uses the store object ~store~.

{generic-function store-lambda-list :arguments (store) :values store-lambda-list}
{definition store}
A store object.

{definition store-lambda-list}
A list representing a {ref :glossary store-lambda-list}.

{description}
Return the store lambda list defining the signature of the store object ~store~ accepts.


{generic-function store-value-type :arguments (store) :values store-value-type}
{definition store}
A store object.

{definition store-value-type}
A type representing the values returned by the store function.

{description}
Return the type representing the set of objects which the store
function represented by the ~store~ returns.

{generic-function store-documentation :arguments (store) :values string}
{definition store}
A store object.

{definition string}
A string.

{description}
Return a string which documents the store object.


{generic-function (setf store-documentation) :arguments (value store) :values string}
{definition value}
The new documentation.

{definition store}
A store object.

{definition string}
A string.

{description}
Change the documentation for the store object.


{generic-function store-value-completion-function :arguments (store) :values function}
{definition store}
A store object.

{definition function}
A function.

{description}
Return the run time completion function for the store object ~store~.

The function returned has the following composition

{begin-example}
(lambda (continuation)
  (lambda store-lambda-list
    (funcall continuation [[completed-arguments*]])))
{end-example}

{generic-function store-type-completion-function :arguments (store) :values function}
{definition store}
A store object.

{definition function}
A function.

{description}
Return the compile time completion function for the store object
~store~.

The function returned has the following composition

{begin-example}
(lambda (continuation)
  (lambda (form environment)
    (funcall continuation
             form environment completed-argument-types)))
{end-example}

{generic-function specialization-name :arguments (specialization) :values symbol}
{definition specialization}
A specialization object.

{definition symbol}
A symbol.

{description}
Return the name associated with the specialization object.


{generic-function specialization-function :arguments (specialization) :values function}
{definition specialization}
A specialization object.

{definition function}
A function object.

{description}


{generic-function specialization-expand-function :arguments (specialization) :values function}
{definition specialization}
A specialization object.

{definition function}
A function object.

{description}
Return a function which performs compile time optimization of the form.

The function must accept two arguments. The first is the form to
optimize and the second is the current environment.


{generic-function specialization-lambda-list :arguments (specialization) :values lambda-list}
{definition specialization}
A specialization object.

{definition lambda-list}
A specialization lambda list.

{description}
Return the specialized lambda list associated with the specialization.


{generic-function specialization-value-type :arguments (specialization) :values type-specifier}
{definition specialization}
A specialization object.

{definition type-specifier}
A type specifier.

{description}
Return the type specifier denoting the type of values returned by the
specialization.

{generic-function specialization-documentation :arguments (specialization) :values string}
{definition specialization}
A specialization object.

{definition string}
A string.

{description}
Return the documentation for the specialization.


{generic-function (setf specialization-documentation)
                  :arguments (value specialization)
                  :values string}
{definition value}
A string.

{definition specialization}
A specialization object.

{definition string}
A string.

{description}
Change the documentation for the specialization object.


{function find-store :arguments (name) :values store}
{definition name}
A symbol.

{definition store}
A store object.

{description}
Return the store object associated with the symbol ~name~ in the
global environment.

{exceptional-situations}
This function signals and error of type {ref :type
invalid-store-name-error} if no store object is associated with the
given name.

{function (setf find-store) :arguments (value name) :values store}
{definition value}
A store object.

{definition name}
A symbol.

{definition store}
A store object.

{description}
Replace the store object associated with the symbol ~name~ in the
global environment.

This function returns ~value~.

If ~value~ is ~nil~ then {ref :function make-store-unbound}
is called on the bound store object.

{generic-function ensure-store-using-object
                  :arguments (object store-name store-lambda-list
                              &key
                                specialization-class documentation
                                completion-function form-type-completion-function
                              &allow-other-keys)
                  :values store}
{definition object}
An object.
{definition store-name}
A function name.
{definition lambda-list}
A store lambda list.
{definition specialization-class}
A class designator.
{definition documentation}
A string.
{definition completion-function}
A function.
{definition form-type-completion-function}
A function.
{definition store}
A store object.
{description}

{exceptional-situations}
A method should signal an error of type {ref :type
invalid-store-lambda-list-error} if it is unable to complete
successfully due to the given store lambda list. For example, ~object~
is an instance of ~standard-store~ and the store lambda list is
changed.

A method should signal an error of type {ref :type
invalid-specialization-class-error} if it is unable to model
specialization objects using the specified specialization class. For
example, ~object~ is an instance of ~standard-store~ and the specified
specialization class is not of the same type currently used by the
store object.

{function ensure-store
          :arguments (name store-lambda-list
                      &key
                        store-class specialization-class documentation
                        completion-function form-type-completion-function
                      &allow-other-keys)
          :values store}
{definition name}
A function name.
{definition store-lambda-list}
A store lambda list.
{definition store-class}
A class designator.
{definition specialization-class}
A class designator.
{definition completion-function}
A function.
{definition form-type-completion-function}
A function.
{definition documentation}
A string.
{definition store}
A store object.
{description}
Install a store function in to the global environment.

If a store object is bound to name, then the function ~{ref :function
ensure-store-using-object}~ is invoked using the existing store
object.

If a store object is not bound to name, then function ~{ref :function
ensure-store-using-object}~ is invoked with the class object
represented by the ~store-class~ designator. If ~store-class~ is not
provided, then the ~standard-store~ class is used.

{exceptional-situations}
If ~store-class~ is specified then an error of type {ref :type
invalid-store-class-error} is signalled when an existing store
object bound to ~name~ is not of type ~store-class~.

{generic-function make-store-unbound :arguments (name) :values ()}
{definition name}
A symbol.

{description}
Remove the association between a store object and a name from the
global environment.

This function is responsible for removing all modifications to the
global environment.

{generic-function ensure-specialization-using-object
                  :arguments (store specialized-lambda-list value-type function
                              &key
                                expand-function name documentation
                              &allow-other-keys)
                  :values specialization}
{definition store-class}
{definition specialized-lambda-list}
{definition value-type}
{definition function}
{definition expand-function}
{definition name}
{definition documentation}
{definition specialization}
{description}


{function ensure-specialization
          :arguments (store-name specialized-lambda-list value-type function
                      &key
                        expand-function documentation name
                      &allow-other-keys)
          :values specialization}
{definition store-name}
{definition specialized-lamda-list}
{definition value-type}
{definition function}
{definition expand-function}
{definition documentation}
{definition name}
{definition specialization}
{description}

{generic-function store-specialization-class
                  :arguments (store)
                  :values class}
{definition store}
{definition class}
{description}

{macro defstore :arguments (store-name store-lambda-list &body options)
                :values store-object}
{definition store-name}
A function name.
{definition store-lambda-list}
A store lambda list.
{definition options}
Store function options.
{definition store-object}
A store object.
{additional-syntax}
options ::= (option*)
option ::= (:documentation documentation)
           (:store-class store-class) |
           (:specialization-class specialization-class) |
           store-class-specific-option
store-class-specific-option ::= (keyword store-class-specific-option-value)
{description}
Define a store function in the global environment.

The {ref :function defstore} macro function invokes the function {ref
:function defstore-using-class} using the class object designated by
~store-class~. If no store class is specified then ~standard-store~ is
used.

The {ref :function defstore} macro function is required to install the
store function at compile time.

Evaluating {ref :function defstore} causes two completion functions to
be associated with the store function in cases where the store lambda
list contains optional or keyword arguments. These functions are
responsible for capturing the lexical environment in which the
initialisation forms for optional and keyword arguments are defined.

{generic-function defstore-using-class :arguments (store-class name store-lambda-list
                                                   &key documentation specialization-class environment
                                                   &allow-other-keys)
                                       :values store}
{definition store-class}
A store object class.

{definition name}
A function name.

{definition store-lambda-list}
A store lambda list.

{definition documentation}
A string.

{definition specialization-class}
A specialization object class.

{definition environment}
An environment object.

{description}
Define a store function in the global environment. The store object
underpinning the store function is of type ~store-class~.

The purpose of this function is to provide users with the ability to
customize the {ref :function defstore} macro. The function returns a
form which when evaluated performs the same tasks as the function {ref
:function ensure-store}.

{macro defspecialization :arguments (store-name specialized-lambda-list value-type &body body)
                         :values specialization}
{additional-syntax}
store-name ::= store-function-name | extended-store-name
extended-store-name ::= (store-function-name [[option*]])
option ::= (:name function-name) |
           meta-class-specific-option
meta-class-specific-option ::= (keyword value-form)
{definition store-function-name}
A function name.
{definition specialized-lambda-list}
A specialized lambda list.
{definition value-type}
A type-specifier.
{definition body}
An implicit {ref :function progn}.
{definition specialization}
A specialization object.
{definition store-function-name}
A function name.
{definition function-name}
A function name.
{description}
Add a specialization to the store function associated with the
name ~store-name~.

This macro provides a more convenient syntax of the macro {ref
:function define-specialization}.

The ~body~ argument specifies the run time behavior of the
specialization.

The evaluation of {ref :function defspecialization} must invoke {ref
:function define-specialization-using-object}.

Evaluation of {ref :function defspecialization} forms must have
compile time side effects.

{exceptional-situations}
An error of type {ref :type invalid-store-name-error} is signalled if
no store object is bound to the given ~store-name~.

{macro define-specialization :arguments (store-name specialized-lambda-list value-type &body options)
                             :values specialization}
{additional-syntax}
options ::= (:function function-form) |
            (:expand-function expand-function-form) |
            (:name specialization-name) |
            (:documentation documentation) |
            meta-class-specific-option
meta-class-specific-option ::= (keyword value-form)
{definition store-name}
A function name.
{definition specialized-lambda-list}
A specialized lambda list.
{definition value-type}
A type specifier.
{definition function-form}
A function form.
{definition expand-function-form}
A function form.
{definition specialization-name}
A function name.
{definition documentation}
A string.
{definition new-specialization}
A specialization object.
{description}
Add a specialization to the store function associated with the
name ~store-name~.

This macro invokes the function {ref :function
define-specialization-using-object} with the store object bound to the
given ~store-name~.

The ~function-form~ must evaluate to a function object representing
the run-time behavior of the specialization.

The ~expand-function-form~ must evaluate to a function object
representing the compile-time behavior of the specialization.

The ~specialization-name~ specifies a the name in the global
environment which users can invoke directly the specialization
directly i.e. by passing the store function.

Evaluation of {ref :function define-specialization} forms must have
compile time side effects.

{exceptional-situations}
An error of type {ref :type invalid-store-name-error} is signalled if
no store object is bound to the given ~store-name~.

{generic-function define-specialization-using-object :arguments (store specialized-lambda-list value-type
                                                                 &key function expand-function name
                                                                      documentation environment
                                                                 &allow-other-keys)
                                                    :values specialization}
{definition store}
A store object.
{definition specialized-lambda-list}
A specialized lambda list.
{definition value-type}
A type specifier.
{definition function}
A function.
{definition expand-function}
A function.
{definition name}
A symbol.
{definition documentation}
A string.
{definition environment}
An environment object.
{description}

||| Local Variables:
||| mode: flyspell
||| ispell-local-dictionary: "american"
||| End: